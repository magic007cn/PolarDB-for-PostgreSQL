import{_ as p,r as n,o as d,c as u,d as s,a as e,b as a,w as t,e as o}from"./app-BZwogGMX.js";const v={},m=e("h1",{id:"格式化并挂载-pfs-for-curvebs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#格式化并挂载-pfs-for-curvebs"},[e("span",null,"格式化并挂载 PFS for CurveBS")])],-1),h=e("p",null,"PolarDB File System，简称 PFS 或 PolarFS，是由阿里云自主研发的高性能类 POSIX 的用户态分布式文件系统，服务于阿里云数据库 PolarDB 产品。使用 PFS 对共享存储进行格式化并挂载后，能够保证一个计算节点对共享存储的写入能够立刻对另一个计算节点可见。",-1),b=e("h2",{id:"pfs-编译安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#pfs-编译安装"},[e("span",null,"PFS 编译安装")])],-1),f={href:"https://github.com/opencurve",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/opencurve/PolarDB-FileSystem",target:"_blank",rel:"noopener noreferrer"},_=o(`<div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">docker</span> pull polardb/polardb_pg_devel:curvebs
<span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token punctuation">\\</span>
    <span class="token parameter variable">--network</span><span class="token operator">=</span>host <span class="token punctuation">\\</span>
    --cap-add<span class="token operator">=</span>SYS_PTRACE <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\\</span>
    <span class="token parameter variable">--name</span> polardb_pg <span class="token punctuation">\\</span>
    polardb/polardb_pg_devel:curvebs <span class="token function">bash</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="读写节点块设备映射与格式化" tabindex="-1"><a class="header-anchor" href="#读写节点块设备映射与格式化"><span>读写节点块设备映射与格式化</span></a></h2><p>进入容器后需要修改 curve 相关的配置文件：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vim</span> /etc/curve/client.conf
<span class="token comment">#</span>
<span class="token comment">################### mds一侧配置信息 ##################</span>
<span class="token comment">#</span>

<span class="token comment"># mds的地址信息，对于mds集群，地址以逗号隔开</span>
<span class="token assign-left variable">mds.listen.addr</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1:6666
<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g=e("code",null,"mds.listen.addr",-1),P=e("code",null,"cluster mds addr",-1),S=o(`<p>容器内已经安装了 <code>curve</code> 工具，该工具可用于创建卷，用户需要使用该工具创建实际存储 PolarFS 数据的 curve 卷：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>curve create <span class="token parameter variable">--filename</span> /volume <span class="token parameter variable">--user</span> my <span class="token parameter variable">--length</span> <span class="token number">10</span> <span class="token parameter variable">--stripeUnit</span> <span class="token number">16384</span> <span class="token parameter variable">--stripeCount</span> <span class="token number">64</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用户可通过 curve create -h 命令查看创建卷的详细说明。上面的列子中，我们创建了一个拥有以下属性的卷：</p><ul><li>卷名为 /volume</li><li>所属用户为 my</li><li>大小为 10GB</li><li>条带大小为 16KB</li><li>条带个数为 64</li></ul><p>特别需要注意的是，在数据库场景下，我们强烈建议使用条带卷，只有这样才能充分发挥 Curve 的性能优势，而 16384 * 64 的条带设置是目前最优的条带设置。</p><h2 id="格式化-curve-卷" tabindex="-1"><a class="header-anchor" href="#格式化-curve-卷"><span>格式化 curve 卷</span></a></h2><p>在使用 curve 卷之前需要使用 pfs 来格式化对应的 curve 卷：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> pfs <span class="token parameter variable">-C</span> curve <span class="token function">mkfs</span> pool@@volume_my_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与我们在本地挂载文件系统前要先在磁盘上格式化文件系统一样，我们也要把我们的 curve 卷格式化为 PolarFS 文件系统。</p><p><strong><em>注意</em></strong>，由于 PolarFS 解析的特殊性，我们将以 <code>pool@\${volume}_\${user}_</code> 的形式指定我们的 curve 卷，此外还需要将卷名中的 / 替换成 @</p><h2 id="启动-pfsd-守护进程" tabindex="-1"><a class="header-anchor" href="#启动-pfsd-守护进程"><span>启动 pfsd 守护进程</span></a></h2><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token function">sudo</span> /usr/local/polarstore/pfsd/bin/start_pfsd.sh <span class="token parameter variable">-p</span> pool@@volume_my_
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果 pfsd 启动成功，那么至此 curve 版 PolarFS 已全部部署完成，已经成功挂载 PFS 文件系统。 下面需要编译部署 PolarDB。</p><hr><h2 id="在-pfs-上编译部署-polardb-for-curve" tabindex="-1"><a class="header-anchor" href="#在-pfs-上编译部署-polardb-for-curve"><span>在 PFS 上编译部署 PolarDB for Curve</span></a></h2>`,15);function B(i,F){const c=n("ArticleInfo"),l=n("ExternalLinkIcon"),r=n("RouteLink");return d(),u("div",null,[m,s(c,{frontmatter:i.$frontmatter},null,8,["frontmatter"]),h,b,e("p",null,[a("在 PolarDB 计算节点上准备好 PFS 相关工具。推荐使用 DockerHub 上的 PolarDB 开发镜像，其中已经包含了编译完毕的 PFS，无需再次编译安装。"),e("a",f,[a("Curve 开源社区"),s(l)]),a(" 针对 PFS 对接 CurveBS 存储做了专门的优化。在用于部署 PolarDB 的计算节点上，使用下面的命令拉起带有 "),e("a",k,[a("PFS for CurveBS"),s(l)]),a(" 的 PolarDB 开发镜像：")]),_,e("p",null,[a("注意，这里的 "),g,a(" 请填写"),s(r,{to:"/zh/deploying/storage-curvebs.html#%E9%83%A8%E7%BD%B2-curvebs-%E9%9B%86%E7%BE%A4"},{default:t(()=>[a("部署 CurveBS 集群")]),_:1}),a("中集群状态中输出的 "),P]),S,e("p",null,[a("参阅 "),s(r,{to:"/zh/deploying/db-pfs-curve.html"},{default:t(()=>[a("PolarDB 编译部署：PFS 文件系统")]),_:1}),a("。")])])}const C=p(v,[["render",B],["__file","fs-pfs-curve.html.vue"]]),D=JSON.parse('{"path":"/zh/deploying/fs-pfs-curve.html","title":"格式化并挂载 PFS for CurveBS","lang":"zh-CN","frontmatter":{"author":"棠羽","date":"2022/08/31","minute":20},"headers":[{"level":2,"title":"PFS 编译安装","slug":"pfs-编译安装","link":"#pfs-编译安装","children":[]},{"level":2,"title":"读写节点块设备映射与格式化","slug":"读写节点块设备映射与格式化","link":"#读写节点块设备映射与格式化","children":[]},{"level":2,"title":"格式化 curve 卷","slug":"格式化-curve-卷","link":"#格式化-curve-卷","children":[]},{"level":2,"title":"启动 pfsd 守护进程","slug":"启动-pfsd-守护进程","link":"#启动-pfsd-守护进程","children":[]},{"level":2,"title":"在 PFS 上编译部署 PolarDB for Curve","slug":"在-pfs-上编译部署-polardb-for-curve","link":"#在-pfs-上编译部署-polardb-for-curve","children":[]}],"git":{"updatedTime":1652432106000},"filePathRelative":"zh/deploying/fs-pfs-curve.md"}');export{C as comp,D as data};
